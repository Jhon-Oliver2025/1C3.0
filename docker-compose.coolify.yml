version: '3.8'

services:
  app:
    build:
      context: ./front
      dockerfile: Dockerfile.coolify  # MUDANÇA: usar o novo Dockerfile
    ports:
      - "80:80"  # MUDANÇA: porta 80 do nginx
    depends_on:
      - backend
    networks:
      - crypto-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"

  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/cryptodb
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - USE_BINANCE_API=true
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - USE_TELEGRAM=true
      - SENDPULSE_CLIENT_ID=${SENDPULSE_CLIENT_ID}
      - SENDPULSE_CLIENT_SECRET=${SENDPULSE_CLIENT_SECRET}
      - SENDPULSE_SENDER_EMAIL=${SENDPULSE_SENDER_EMAIL}
      - SENDPULSE_API_URL=${SENDPULSE_API_URL}
    depends_on:
      - db
      - redis
    networks:
      - crypto-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=service"

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cryptodb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=database"

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - crypto-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=cache"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto-network:
    driver: bridge