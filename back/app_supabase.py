#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Krypton Trading Bot - Vers√£o com Supabase
Sistema de trading automatizado com an√°lise t√©cnica avan√ßada
"""

import os
import sys
import time
import logging
from datetime import datetime
from flask import Flask, jsonify, request
from flask_cors import CORS
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Importar configura√ß√µes
from config import server
from supabase_config import supabase_config

# Importar blueprints das rotas
from api_routes.auth import auth_bp
from api_routes.signals import signals_bp
from api_routes.trading import trading_bp
from api_routes.users import users_bp
from api_routes.notifications import notifications_bp
from api_routes.market_times import market_times_bp
from api_routes.market_status import market_status_bp
from api_routes.cleanup_status import cleanup_status_bp

# Configurar CORS
CORS(server, resources={
    r"/api/*": {
        "origins": ["*"],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

class KryptonBotSupabase:
    """
    Bot de trading principal com integra√ß√£o Supabase
    """
    
    def __init__(self):
        self.config = supabase_config
        self.is_supabase_configured = self.config.is_configured
        
        if self.is_supabase_configured:
            self.database_url = self.config.get_database_url()
            print("‚úÖ Supabase configurado")
        else:
            self.database_url = None
            print("‚ö†Ô∏è Supabase n√£o configurado - modo degradado")
        
        # Inicializar componentes
        self._init_components()
        
        print("‚úÖ KryptonBot inicializado")
    
    def _init_components(self):
        """
        Inicializa os componentes do bot
        """
        try:
            # Importar e inicializar componentes essenciais
            from core.binance_client import BinanceClient
            from core.telegram_notifier import TelegramNotifier
            from core.technical_analysis import TechnicalAnalysis
            from core.gerenciar_sinais import GerenciadorSinais
            from core.database import Database
            from core.market_scheduler import MarketScheduler
            
            # Inicializar inst√¢ncia do banco de dados
            self.db = Database()
            
            # Inicializar clientes
            self.binance_client = BinanceClient()
            self.telegram = TelegramNotifier()
            
            # Inicializar an√°lise t√©cnica com inst√¢ncia do banco
            try:
                self.technical_analysis = TechnicalAnalysis(self.db)
            except TypeError:
                # Fallback se TechnicalAnalysis n√£o aceitar db_instance
                self.technical_analysis = TechnicalAnalysis()
            
            # Inicializar gerenciador de sinais
            if self.is_supabase_configured and self.database_url:
                self.gerenciador_sinais = GerenciadorSinais(self.db)
            else:
                # Modo degradado sem banco
                self.gerenciador_sinais = None
                print("‚ö†Ô∏è Gerenciador de sinais desabilitado - Supabase n√£o configurado")
            
            # Inicializar scheduler de mercado
            try:
                self.market_scheduler = MarketScheduler(self.db, self.technical_analysis)
                self.market_scheduler.start()
                print("‚úÖ Market Scheduler inicializado e ativo")
            except Exception as scheduler_error:
                print(f"‚ö†Ô∏è Erro ao inicializar Market Scheduler: {scheduler_error}")
                self.market_scheduler = None
            
            # Inicializar monitoramento cont√≠nuo de mercado
            try:
                import threading
                import time
                
                def start_monitoring():
                    """Inicia o monitoramento cont√≠nuo ap√≥s 5 segundos"""
                    time.sleep(5)  # Aguardar Flask inicializar
                    print("üîç Iniciando monitoramento cont√≠nuo de mercado...")
                    if hasattr(self, 'technical_analysis') and self.technical_analysis:
                        self.technical_analysis.start_monitoring()
                    else:
                        print("‚ö†Ô∏è TechnicalAnalysis n√£o dispon√≠vel para monitoramento")
                
                # Iniciar thread de monitoramento
                monitor_thread = threading.Thread(target=start_monitoring, daemon=True)
                monitor_thread.start()
                print("‚úÖ Thread de monitoramento iniciada")
                
            except Exception as monitor_error:
                print(f"‚ö†Ô∏è Erro ao inicializar monitoramento: {monitor_error}")
            
            print("‚úÖ Componentes inicializados com sucesso")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao inicializar componentes: {e}")
            # Continuar mesmo com erros para permitir healthcheck
            # Garantir que pelo menos a inst√¢ncia do banco existe
            if not hasattr(self, 'db'):
                try:
                    from core.database import Database
                    self.db = Database()
                    print("‚úÖ Inst√¢ncia do banco inicializada em modo de recupera√ß√£o")
                except Exception as db_error:
                    print(f"‚ö†Ô∏è Erro ao inicializar banco em modo de recupera√ß√£o: {db_error}")
                    # Criar um mock do banco para evitar erros
                    class MockDatabase:
                        def get_user_by_username(self, username):
                            return None
                        def get_user_by_email(self, email):
                            return None
                    self.db = MockDatabase()
    
    def get_status(self):
        """
        Retorna o status do bot
        """
        status = {
            'bot': 'running',
            'database': 'connected' if self.is_supabase_configured else 'degraded',
            'supabase_configured': self.is_supabase_configured,
            'timestamp': datetime.now().isoformat()
        }
        
        if self.is_supabase_configured:
            status['supabase_url'] = self.config.SUPABASE_URL
        
        # Verificar componentes
        try:
            if hasattr(self, 'binance_client'):
                status['binance'] = 'connected'
            if hasattr(self, 'telegram'):
                status['telegram'] = 'connected'
            if hasattr(self, 'gerenciador_sinais') and self.gerenciador_sinais:
                status['signals'] = 'connected'
            else:
                status['signals'] = 'degraded'
        except:
            pass
        
        return status

# Inst√¢ncia global do bot
bot = None

def create_app():
    """
    Factory function para criar a aplica√ß√£o Flask
    """
    global bot
    
    try:
        # Inicializar o bot
        bot = KryptonBotSupabase()
        print("‚úÖ Bot inicializado com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao inicializar bot: {e}")
        # Criar um bot mock para permitir que a aplica√ß√£o inicie
        class MockBot:
            def get_status(self):
                return {
                    'bot': 'degraded',
                    'error': 'Initialization failed',
                    'timestamp': datetime.now().isoformat()
                }
        bot = MockBot()
    
    # Configura√ß√µes adicionais
    server.config['JWT_SECRET'] = os.getenv('JWT_SECRET', 'default-jwt-secret-key')
    
    # Adicionar inst√¢ncia do bot ao contexto da aplica√ß√£o
    server.bot_instance = bot
    
    # Registrar blueprints das rotas de API
    server.register_blueprint(auth_bp, url_prefix='/api/auth')
    server.register_blueprint(signals_bp, url_prefix='/api/signals')
    server.register_blueprint(trading_bp, url_prefix='/api/trading')
    server.register_blueprint(users_bp, url_prefix='/api/users')
    server.register_blueprint(notifications_bp, url_prefix='/api/notifications')
    server.register_blueprint(market_times_bp, url_prefix='/api')
    server.register_blueprint(market_status_bp, url_prefix='/api')
    server.register_blueprint(cleanup_status_bp, url_prefix='/api')
    
    # Registrar rotas b√°sicas
    @server.route('/api/health')
    def health_check():
        """
        Endpoint de health check para Docker
        """
        try:
            status = bot.get_status()
            return jsonify({
                'status': 'healthy',
                'service': 'krypton-bot-supabase',
                'details': status
            }), 200
        except Exception as e:
            return jsonify({
                'status': 'unhealthy',
                'service': 'krypton-bot-supabase',
                'error': str(e)
            }), 500
    
    @server.route('/api/status')
    def api_status():
        """
        Endpoint de status da API
        """
        try:
            status = bot.get_status()
            return jsonify(status), 200
        except Exception as e:
            return jsonify({
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }), 500
    
    @server.route('/api/test-telegram')
    def test_telegram():
        """
        Endpoint de teste para Telegram
        """
        try:
            telegram_token = os.getenv('TELEGRAM_BOT_TOKEN')
            telegram_chat_id = os.getenv('TELEGRAM_CHAT_ID')
            
            if not telegram_token or not telegram_chat_id:
                return jsonify({
                    'status': 'error',
                    'message': 'Telegram n√£o configurado',
                    'configured': False
                }), 400
            
            return jsonify({
                'status': 'success',
                'message': 'Telegram configurado',
                'configured': True,
                'bot_token_configured': bool(telegram_token),
                'chat_id_configured': bool(telegram_chat_id)
            }), 200
            
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': str(e)
            }), 500
    
    @server.route('/api/test-binance')
    def test_binance():
        """
        Endpoint de teste para Binance API
        """
        try:
            binance_api_key = os.getenv('BINANCE_API_KEY')
            binance_secret_key = os.getenv('BINANCE_SECRET_KEY')
            
            if not binance_api_key or not binance_secret_key:
                return jsonify({
                    'status': 'error',
                    'message': 'Binance API n√£o configurada',
                    'configured': False
                }), 400
            
            return jsonify({
                'status': 'success',
                'message': 'Binance API configurada',
                'configured': True,
                'api_key_configured': bool(binance_api_key),
                'secret_key_configured': bool(binance_secret_key)
            }), 200
            
        except Exception as e:
            return jsonify({
                'status': 'error',
                'message': str(e)
            }), 500
    
    @server.route('/api/scan-market', methods=['POST'])
    def scan_market_manual():
        """
        Endpoint para executar escaneamento manual do mercado
        """
        try:
            from datetime import datetime
            import pytz
            
            # Obter hor√°rio de S√£o Paulo
            tz = pytz.timezone('America/Sao_Paulo')
            now = datetime.now(tz)
            
            print(f"\nüîç ESCANEAMENTO MANUAL SOLICITADO - {now.strftime('%d/%m/%Y %H:%M:%S')}")
            
            if not hasattr(bot, 'technical_analysis') or not bot.technical_analysis:
                return jsonify({
                    'status': 'error',
                    'message': 'TechnicalAnalysis n√£o inicializado'
                }), 500
            
            # Executar escaneamento
            signals = bot.technical_analysis.scan_market(verbose=True)
            
            result = {
                'status': 'success',
                'timestamp': now.strftime('%Y-%m-%d %H:%M:%S %Z'),
                'signals_found': len(signals),
                'signals': signals
            }
            
            if signals:
                print(f"\nüéØ ESCANEAMENTO MANUAL CONCLU√çDO:")
                print(f"‚ú® {len(signals)} novos sinais encontrados!")
                for signal in signals:
                    print(f"   ‚Ä¢ {signal['symbol']}: {signal['type']} - {signal['signal_class']} (Score: {signal['quality_score']:.1f})")
            else:
                print(f"\nüìä Nenhum sinal de qualidade encontrado no escaneamento manual")
            
            return jsonify(result), 200
            
        except Exception as e:
            print(f"‚ùå Erro no escaneamento manual: {e}")
            return jsonify({
                'status': 'error',
                'message': str(e)
            }), 500
    
    @server.route('/')
    def index():
        """
        P√°gina inicial
        """
        return jsonify({
            'service': 'Krypton Trading Bot - Supabase',
            'version': '2.0.0',
            'status': 'running',
            'database': 'supabase'
        })
    
    # NOVO: Endpoint p√∫blico para sinais (sem autentica√ß√£o)
    @server.route('/api/signals/public', methods=['GET'])
    def get_public_signals():
        """Endpoint p√∫blico para obter sinais sem autentica√ß√£o diretamente do banco"""
        try:
            from datetime import datetime, timedelta
            from supabase import create_client, Client
            
            # Inicializar cliente Supabase
            supabase_url = os.getenv('SUPABASE_URL')
            supabase_key = os.getenv('SUPABASE_ANON_KEY')
            
            if not supabase_url or not supabase_key:
                return jsonify({
                    'success': False,
                    'error': 'Supabase n√£o configurado',
                    'message': 'Configura√ß√£o do banco de dados n√£o encontrada'
                }), 500
            
            supabase: Client = create_client(supabase_url, supabase_key)
            
            # Buscar sinais diretamente do banco de dados (com filtro de 24h restaurado)
            try:
                from datetime import timezone
                utc_24h_ago = (datetime.now(timezone.utc) - timedelta(hours=24)).isoformat()
                result = supabase.table('signals').select('*').eq('status', 'OPEN').gte('created_at', utc_24h_ago).order('created_at', desc=True).limit(20).execute()
            except Exception as e:
                print(f"‚ö†Ô∏è Erro na consulta Supabase: {e}")
                return jsonify({
                    'signals': [],
                    'success': True,
                    'total': 0,
                    'message': 'Sistema temporariamente indispon√≠vel'
                }), 200
            
            signals = []
            for signal in result.data:
                # Filtrar apenas sinais de alta qualidade (80+ pontos)
                quality_score = float(signal.get('quality_score') or 0)
                if quality_score < 80.0:
                    continue  # Pular sinais de baixa qualidade
                
                # Calcular projection_percentage e signal_class baseado nos dados existentes
                entry_price = float(signal.get('entry_price') or 0)
                target_price = float(signal.get('target_price') or 0)
                signal_type = signal.get('type', '')
                
                # Calcular proje√ß√£o
                if entry_price > 0 and target_price > 0:
                    if signal_type == 'COMPRA':
                        projection_percentage = ((target_price - entry_price) / entry_price) * 100
                    else:  # VENDA
                        projection_percentage = ((entry_price - target_price) / entry_price) * 100
                else:
                    projection_percentage = 0
                
                # Determinar signal_class baseado no quality_score
                if quality_score >= 110:
                    signal_class = "ELITE+"
                elif quality_score >= 95:
                    signal_class = "ELITE"
                elif quality_score >= 85:
                    signal_class = "PREMIUM+"
                elif quality_score >= 80:
                    signal_class = "PREMIUM"
                else:
                    signal_class = "STANDARD"
                
                # Formatar dados para o frontend
                formatted_signal = {
                    'symbol': signal.get('symbol', ''),
                    'type': signal_type,
                    'entry_price': entry_price,
                    'entry_time': signal.get('entry_time', signal.get('created_at', '')),
                    'target_price': target_price,
                    'projection_percentage': round(projection_percentage, 2),
                    'signal_class': signal_class,
                    'status': signal.get('status', ''),
                    'quality_score': quality_score
                }
                signals.append(formatted_signal)
            
            print(f"üìä Retornando {len(signals)} sinais do banco de dados")
            
            return jsonify({
                'success': True,
                'signals': signals,
                'total': len(signals)
            })
        except Exception as e:
            import traceback
            print(f"‚ùå Erro ao buscar sinais: {e}")
            print(traceback.format_exc())
            return jsonify({
                'success': False,
                'error': str(e),
                'message': 'Erro ao buscar sinais do banco de dados'
            }), 500
    
    return server

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ Iniciando Krypton Trading Bot com Supabase...")
    
    # Verificar vari√°veis de ambiente cr√≠ticas
    try:
        supabase_config._validate_config()
    except ValueError as e:
        print(f"‚ö†Ô∏è Aviso de configura√ß√£o: {e}")
        print("üí° Executando em modo degradado - configure as vari√°veis do Supabase para funcionalidade completa")
        # N√£o sair, continuar em modo degradado
    
    # Criar aplica√ß√£o
    app = create_app()
    
    # Configura√ß√µes do servidor
    port = int(os.getenv('FLASK_PORT', 5000))
    host = os.getenv('FLASK_HOST', '0.0.0.0')
    debug = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'
    
    print(f"üåê Servidor iniciando em {host}:{port}")
    print(f"üîß Debug mode: {debug}")
    print(f"üóÑÔ∏è Database: Supabase")
    
    # Iniciar servidor
    try:
        app.run(
            host=host,
            port=port,
            debug=debug,
            threaded=True
        )
    except KeyboardInterrupt:
        print("\nüëã Encerrando aplica√ß√£o...")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()