# Dockerfile otimizado para resolver problemas do Rollup e tsconfig no Alpine
FROM node:18-alpine

# Instalar dependências do sistema necessárias
RUN apk add --no-cache \
    git \
    python3 \
    make \
    g++ \
    curl \
    libc6-compat

WORKDIR /app

# Limpar cache do npm
RUN npm cache clean --force

# Copiar package.json primeiro
COPY package*.json ./

# Remover package-lock.json e reinstalar dependências
RUN rm -f package-lock.json
RUN npm install --verbose

# Instalar terser globalmente (necessário para Vite build)
RUN npm install -g terser

# Instalar terser localmente também
RUN npm install terser --save-dev

# Criar tsconfig.node.json limpo (sem BOM)
RUN echo '{"compilerOptions":{"target":"ES2022","lib":["ES2023"],"module":"ESNext","skipLibCheck":true,"moduleResolution":"bundler","allowSyntheticDefaultImports":true,"strict":true,"noEmit":true},"include":["vite.config.ts"]}' > tsconfig.node.json

# Copiar outros arquivos de configuração
COPY tsconfig.json ./
COPY vite.config.ts ./

# Forçar reinstalação do Rollup
RUN npm rebuild rollup --verbose

# Copiar código fonte
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./

# Configurar ambiente
ENV NODE_ENV=production
ENV CI=false
ENV GENERATE_SOURCEMAP=false
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Verificar se o tsconfig.node.json está válido
RUN node -e "console.log('tsconfig.node.json válido:', JSON.parse(require('fs').readFileSync('tsconfig.node.json', 'utf8')))"

# Verificar se o Rollup está funcionando
RUN npx rollup --version

# Verificar se o terser está disponível
RUN npx terser --version

# Build da aplicação
RUN npm run build

# Verificar se o build foi criado
RUN ls -la dist/

# Instalar serve para servir arquivos estáticos
RUN npm install -g serve

# Expor porta
EXPOSE 3000

# Servir aplicação
CMD ["serve", "-s", "dist", "-l", "3000"]