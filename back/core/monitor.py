import threading
import time
import os
import traceback  # Add traceback import
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Union
from binance.client import Client
from colorama import Fore, Style, init
from tabulate import tabulate
from tqdm import tqdm
from .database import Database
from .technical_analysis import TechnicalAnalysis
from .telegram_notifier import TelegramNotifier
from .gerenciar_sinais import GerenciadorSinais
from threading import Thread
import pandas as pd  # Adicione esta linha no topo do arquivo junto com os outros imports

# Initialize colorama
init()

class Monitor(Thread):
    VERSION = "7.6.0"

    def __init__(self, db_instance: Database):
        super().__init__()
        print("\n" + "="*70)
        print(f"ü§ñ Iniciando K-10 Bot v{self.VERSION}")
        print("="*70)

        # Use a inst√¢ncia do banco de dados que foi passada para o construtor
        self.db = db_instance
        # Passe a inst√¢ncia do banco de dados para o GerenciadorSinais
        self.gerenciador = GerenciadorSinais(self.db)

        from config import server

        # --- In√≠cio da Edi√ß√£o ---
        # Passar a inst√¢ncia do banco de dados para TechnicalAnalysis
        self.analyzer = TechnicalAnalysis(self.db)
        # --- Fim da Edi√ß√£o ---

        self.binance = Client()
        self.check_interval = 60
        self._monitor_running = True
        self._is_running = False
        self.daemon = True

        # Get Telegram credentials from config
        telegram_token = server.config.get('TELEGRAM_TOKEN')
        telegram_chat_id = server.config.get('TELEGRAM_CHAT_ID')

        self.notifier = TelegramNotifier(telegram_token, telegram_chat_id)
        if self.notifier.test_connection():
            print("‚úÖ Telegram configurado com sucesso!")
        else:
            print("‚ö†Ô∏è Aviso: Telegram n√£o configurado corretamente")
            # Remover a linha self.notifier = None  # Este √© o problema principal

        self.stats = {
            'wins': 0,
            'losses': 0,
            'total_pairs': 0
        }
        print("‚úÖ Sistema inicializado com sucesso!\n")

    def get_current_price(self, symbol: str) -> Optional[float]:
        """Obt√©m o pre√ßo atual de um par"""
        try:
            ticker = self.binance.futures_symbol_ticker(symbol=symbol)
            return float(ticker['price'])
        except Exception as e:
            print(f"‚ùå Erro ao buscar pre√ßo de {symbol}: {e}")
            return None

    def calcular_variacao(self, entrada: float, atual: float, tipo: str) -> float:
        """Calcula a varia√ß√£o percentual do pre√ßo"""
        if tipo.upper() == 'LONG':
            return ((atual - entrada) / entrada) * 100
        return ((entrada - atual) / entrada) * 100

    def monitor_loop(self):
        """Loop principal de monitoramento"""
        try:
            sinais_abertos = self.gerenciador.processar_sinais_abertos()
            if not sinais_abertos.empty:
                print("\n[MONITOR] üìä MONITORAMENTO DE SINAIS ATIVOS")
                print("="*50)
                table_data = []
                for _, sinal in sinais_abertos.iterrows():
                    try:
                        symbol = str(sinal['symbol'])
                        preco_atual = self.get_current_price(symbol)
                        if not preco_atual:
                            continue

                        entry_time = pd.to_datetime(sinal['entry_time'])
                        horas_ativas = (datetime.now() - entry_time).total_seconds() / 3600

                        variacao = self.calcular_variacao(
                            float(sinal['entry_price']),
                            preco_atual,
                            str(sinal['type'])
                        )

                        cor = Fore.GREEN if variacao > 0 else Fore.RED
                        table_data.append([
                            f"{Fore.CYAN}{symbol}{Style.RESET_ALL}",
                            f"{Fore.YELLOW}{sinal['type']}{Style.RESET_ALL}",
                            f"{cor}{variacao:+.2f}%{Style.RESET_ALL}",
                            f"{Fore.WHITE}{horas_ativas:.1f}h{Style.RESET_ALL}"
                        ])

                    except Exception as e:
                        print(f"‚ùå Erro ao processar sinal: {e}")
                        continue

                if table_data:
                    print(tabulate(
                        table_data,
                        headers=[
                            f'{Fore.CYAN}Par{Style.RESET_ALL}',
                            f'{Fore.YELLOW}Tipo{Style.RESET_ALL}',
                            f'{Fore.WHITE}Varia√ß√£o{Style.RESET_ALL}',
                            f'{Fore.WHITE}Tempo{Style.RESET_ALL}'
                        ],
                        tablefmt='grid'
                    ))
                print("="*50 + "\n")
            else:
                print("[INFO] Nenhum sinal ativo para monitorar")
            
            # --- In√≠cio da Edi√ß√£o ---
            # REMOVIDO: O loop de sleep foi movido para o m√©todo run()
            # for _ in range(self.check_interval):
            #     if not self._monitor_running:
            #         break
            #     time.sleep(1)
            # --- Fim da Edi√ß√£o ---
                
        except Exception as e:
            print(f"[ERROR] ‚ùå Erro no loop de monitoramento: {e}")
            print(f"[TRACE] {traceback.format_exc()}")
            # --- In√≠cio da Edi√ß√£o ---
            # Tornar este sleep tamb√©m interromp√≠vel
            for _ in range(5): # Dorme por 5 segundos, verificando a flag a cada segundo
                if not self._monitor_running:
                    break
                time.sleep(1)
            # --- Fim da Edi√ß√£o ---

    def run(self):
        """M√©todo principal que executa o monitoramento"""
        try:
            print(f"{Fore.GREEN}‚ú® Monitor iniciado com sucesso{Style.RESET_ALL}")
            
            while True:
                try:
                    # Executar an√°lise t√©cnica (usando analyzer ao inv√©s de technical_analysis)
                    self.analyzer.scan_market()
                    
                    # Processar sinais abertos (usando gerenciador ao inv√©s de gerenciador_sinais)
                    self.gerenciador.processar_sinais_abertos()
                    
                    # Aguardar 5 minutos antes da pr√≥xima verifica√ß√£o
                    print(f"\n‚è≥ Aguardando pr√≥xima verifica√ß√£o...")
                    time.sleep(300)  # 5 minutos
                    
                except Exception as e:
                    print(f"{Fore.RED}‚ùå Erro durante monitoramento: {e}{Style.RESET_ALL}")
                    traceback.print_exc()
                    time.sleep(60)  # Aguarda 1 minuto antes de tentar novamente
                    
        except KeyboardInterrupt:
            print(f"{Fore.YELLOW}‚ö†Ô∏è Monitoramento interrompido pelo usu√°rio{Style.RESET_ALL}")
        """M√©todo principal da thread"""
        print("\n" + "="*70)
        print(f"üöÄ INICIANDO MONITORAMENTO DE MERCADO - v{self.VERSION}")
        print("="*70)
        self._is_running = True
        
        # Vari√°vel para controlar se a limpeza di√°ria j√° foi feita hoje
        self._last_cleanup_day = None
        
        while self._monitor_running:
            try:
                print("\n" + "="*70)
                now = datetime.now()
                print(f"‚è∞ {now.strftime('%d/%m/%Y %H:%M:%S')}")
                print(f"[INFO] üîÑ Iniciando novo ciclo de verifica√ß√£o")
                print("="*70)
                
                # Verificar se √© hora de fazer a limpeza di√°ria (pr√≥ximo da meia-noite)
                # Executa a limpeza entre 00:00 e 00:05
                if now.hour == 0 and now.minute < 5 and self._last_cleanup_day != now.date():
                    print("\n[CLEANUP] üßπ Executando limpeza di√°ria de sinais abertos do dia anterior...")
                    self.gerenciador.limpar_sinais_abertos_do_dia_anterior()
                    self._last_cleanup_day = now.date()
                    print("[CLEANUP] ‚úÖ Limpeza di√°ria conclu√≠da.")
                
                print("\n[SCAN] üì° Escaneando mercado...")
                novos_sinais = self.analyzer.scan_market(verbose=True)
                
                if novos_sinais:
                    print(f"\n[ALERT] ‚ú® {len(novos_sinais)} NOVOS SINAIS ENCONTRADOS!")
                    print("-"*40)
                    for sinal in novos_sinais:
                        print(f"[SIGNAL] üìä {sinal['symbol']} - {sinal['type']} @ {sinal['entry_price']}")
                        if self.notifier:
                            self.notifier.send_signal(
                                sinal['symbol'],
                                sinal['type'],
                                float(sinal['entry_price']),
                                sinal.get('quality_score', 0),
                                sinal.get('entry_timeframe', '4h'),
                                sinal.get('target_price')
                            )
                    print("-"*40)
                else:
                    print("[INFO] Nenhum novo sinal encontrado")
                
                self.monitor_loop() # Esta chamada agora N√ÉO tem sleep interno
                
                print("\n[WAIT] ‚è≥ AGUARDANDO PR√ìXIMO CICLO")
                print(f"[INFO] ‚è∞ Pr√≥xima verifica√ß√£o em {self.check_interval} segundos")
                print("="*70)
                
                # --- In√≠cio da Edi√ß√£o ---
                # Este √© o √öNICO loop de espera principal, e ele √© interromp√≠vel
                for i in range(self.check_interval, 0, -1):
                    if not self._monitor_running:
                        break
                    print(f"\r‚åõ Aguardando: {i:3d}s", end="")
                    time.sleep(1)
                print("\r" + " "*50, end="") # Limpa a linha ap√≥s o loop, mesmo que interrompido
                # --- Fim da Edi√ß√£o ---
                
            except Exception as e:
                print(f"\n‚ùå ERRO NO CICLO: {e}")
                if not self._monitor_running:
                    break
                # --- In√≠cio da Edi√ß√£o ---
                # Tornar este sleep tamb√©m interromp√≠vel
                for _ in range(5): # Dorme por 5 segundos, verificando a flag a cada segundo
                    if not self._monitor_running:
                        break
                    time.sleep(1)
                # --- Fim da Edi√ß√£o ---
        
        print("\n" + "="*70)
        print("‚úÖ MONITORAMENTO ENCERRADO")
        print("="*70 + "\n")

    def stop(self):
        """Para o monitoramento"""
        print("üõë Parando monitoramento...")
        self._monitor_running = False
        self._is_running = False
        # --- In√≠cio da Edi√ß√£o ---
        # REMOVIDO: A chamada join() deve ser feita pela thread que chama stop()
        # if self.is_alive():
        #     self.join(timeout=2)
        # --- Fim da Edi√ß√£o ---

# --- In√≠cio da Edi√ß√£o ---
# Modificar a fun√ß√£o start_monitoring para aceitar db_instance
def start_monitoring(db_instance: Database):
    """Fun√ß√£o para iniciar o monitoramento em background"""
    try:
        # Passar a inst√¢ncia db ao criar o Monitor
        monitor = Monitor(db_instance)
        monitor.start()  # Inicia a thread
        print("‚úÖ Monitoramento iniciado com sucesso!")
        return monitor
    except Exception as e:
        print(f"‚ùå Erro ao iniciar monitoramento: {e}")
        return None
# --- Fim da Edi√ß√£o ---


if __name__ == "__main__":
    # --- In√≠cio da Edi√ß√£o ---
    # Se voc√™ executa Monitor.py diretamente (python core/monitor.py),
    # voc√™ precisa criar uma inst√¢ncia de Database aqui para passar para Monitor.
    # Se voc√™ sempre executa index.py, esta se√ß√£o __main__ em Monitor.py
    # pode ser removida ou modificada para fins de teste.
    # Exemplo para teste:
    test_db = Database() # Criar inst√¢ncia do Database
    monitor = Monitor(test_db) # Passar a inst√¢ncia db
    monitor.start()
    # --- Fim da Edi√ß√£o ---

# --- In√≠cio da Edi√ß√£o ---
# Adicionar esta linha no final do arquivo para exportar a classe Monitor (manter)
__all__ = ['Monitor']
# --- Fim da Edi√ß√£o ---