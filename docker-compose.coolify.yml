version: '3.8'

services:
  app:
    build:
      context: ./front
      dockerfile: Dockerfile  # ← Mudança aqui!
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://1crypten.space/api
    depends_on:
      - backend
    networks:
      - crypto-network
    restart: unless-stopped
    labels:
      - "coolify.managed=true"
      - "coolify.type=application"
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`1crypten.space`) || Host(`www.1crypten.space`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/cryptodb
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SENDPULSE_CLIENT_ID=${SENDPULSE_CLIENT_ID}
      - SENDPULSE_CLIENT_SECRET=${SENDPULSE_CLIENT_SECRET}
      - SENDPULSE_SENDER_EMAIL=${SENDPULSE_SENDER_EMAIL}
      - SENDPULSE_API_URL=${SENDPULSE_API_URL}
      - CORS_ORIGINS=https://1crypten.space,https://www.1crypten.space
    depends_on:
      - db
      - redis
    networks:
      - crypto-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`1crypten.space`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.priority=100"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=letsencrypt"
      - "traefik.http.services.backend.loadbalancer.server.port=5000"
      # Configurações de timeout mais agressivas
      - "traefik.http.services.backend.loadbalancer.healthcheck.path=/api/status"
      - "traefik.http.services.backend.loadbalancer.healthcheck.interval=10s"
      - "traefik.http.services.backend.loadbalancer.healthcheck.timeout=5s"
      - "traefik.http.services.backend.loadbalancer.responseForwarding.flushInterval=1s"
      - "traefik.http.services.backend.loadbalancer.healthcheck.timeout=10s"
      - "traefik.http.services.backend.loadbalancer.healthcheck.interval=30s"
    healthcheck:  # ← Indentação corrigida (4 espaços)
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=cryptodb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - crypto-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto-network:
    driver: bridge