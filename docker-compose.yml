version: '3.8'

services:
  # Backend Python
  backend:
    build: ./back
    container_name: crypto-backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/crypto_signals
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - CORS_ORIGINS=https://1crypten.space,https://www.1crypten.space
      - API_BASE_URL=https://api.1crypten.space
    volumes:
      - ./back/data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - crypto-network

  # Frontend React
  frontend:
    build: ./front
    container_name: crypto-frontend
    environment:
      - REACT_APP_API_URL=https://api.1crypten.space
      - REACT_APP_DOMAIN=https://1crypten.space
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - crypto-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto-postgres
    environment:
      - POSTGRES_DB=crypto_signals
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - crypto-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - crypto-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crypto-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - crypto-network

volumes:
  postgres_data:
  redis_data:

networks:
  crypto-network:
    driver: bridge


## ðŸŽ‰ **Excelente! DNS Configurado com Sucesso!**

Os testes de DNS confirmam que todos os registros estÃ£o funcionando perfeitamente:

### âœ… **Status dos DomÃ­nios:**
- **`1crypten.space`** â†’ `91.99.219.101` âœ…
- **`api.1crypten.space`** â†’ `91.99.219.101` âœ…  
- **`n8n.1crypten.space`** â†’ `91.99.219.101` âœ…

## ðŸš€ **PrÃ³ximo Passo: Atualizar ConfiguraÃ§Ãµes**

Agora vamos atualizar os arquivos de configuraÃ§Ã£o para usar os domÃ­nios:

### **1. AtualizaÃ§Ã£o do Docker Compose:**
```yaml
version: '3.8'

services:
  # Backend Python
  backend:
    build: ./back
    container_name: crypto-backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/crypto_signals
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - CORS_ORIGINS=https://1crypten.space,https://www.1crypten.space
      - API_BASE_URL=https://api.1crypten.space
    volumes:
      - ./back/data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - crypto-network

  # Frontend React
  frontend:
    build: ./front
    container_name: crypto-frontend
    environment:
      - REACT_APP_API_URL=https://api.1crypten.space
      - REACT_APP_DOMAIN=https://1crypten.space
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - crypto-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: crypto-postgres
    environment:
      - POSTGRES_DB=crypto_signals
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - crypto-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - crypto-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: crypto-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - crypto-network

volumes:
  postgres_data:
  redis_data:

networks:
  crypto-network:
    driver: bridge