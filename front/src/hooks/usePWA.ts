/**
 * Hook personalizado para funcionalidades PWA
 * Gerencia instala√ß√£o, atualiza√ß√µes e notifica√ß√µes
 */

import { useState, useEffect } from 'react';

interface PWAState {
  isInstallable: boolean;
  isInstalled: boolean;
  isUpdateAvailable: boolean;
  isOnline: boolean;
}

interface PWAActions {
  installApp: () => Promise<void>;
  updateApp: () => void;
  requestNotificationPermission: () => Promise<NotificationPermission>;
  showNotification: (title: string, options?: NotificationOptions) => void;
}

export const usePWA = (): PWAState & PWAActions => {
  const [isInstallable, setIsInstallable] = useState(false);
  const [isInstalled, setIsInstalled] = useState(false);
  const [isUpdateAvailable, setIsUpdateAvailable] = useState(false);
  const [isOnline, setIsOnline] = useState(navigator.onLine);
  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);
  const [registration, setRegistration] = useState<ServiceWorkerRegistration | null>(null);

  /**
   * Detecta se o app est√° instalado como PWA
   */
  const checkIfInstalled = () => {
    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
    const isInWebAppiOS = (window.navigator as any).standalone === true;
    const isInWebAppChrome = window.matchMedia('(display-mode: minimal-ui)').matches;
    
    return isStandalone || isInWebAppiOS || isInWebAppChrome;
  };

  /**
   * Instala o aplicativo PWA
   */
  const installApp = async (): Promise<void> => {
    if (!deferredPrompt) {
      throw new Error('App n√£o pode ser instalado no momento');
    }

    try {
      // Mostrar prompt de instala√ß√£o
      deferredPrompt.prompt();
      
      // Aguardar escolha do usu√°rio
      const { outcome } = await deferredPrompt.userChoice;
      
      console.log('PWA install outcome:', outcome);
      
      if (outcome === 'accepted') {
        console.log('‚úÖ PWA instalado com sucesso!');
        setIsInstalled(true);
        setIsInstallable(false);
      }
      
      // Limpar o prompt
      setDeferredPrompt(null);
    } catch (error) {
      console.error('‚ùå Erro ao instalar PWA:', error);
      throw error;
    }
  };

  /**
   * Atualiza o aplicativo para nova vers√£o
   */
  const updateApp = (): void => {
    if (registration && registration.waiting) {
      // Enviar mensagem para o service worker ativar a nova vers√£o
      registration.waiting.postMessage({ type: 'SKIP_WAITING' });
      
      // Recarregar a p√°gina ap√≥s ativa√ß√£o
      window.location.reload();
    }
  };

  /**
   * Solicita permiss√£o para notifica√ß√µes
   */
  const requestNotificationPermission = async (): Promise<NotificationPermission> => {
    if (!('Notification' in window)) {
      console.warn('Este navegador n√£o suporta notifica√ß√µes');
      return 'denied';
    }

    if (Notification.permission === 'granted') {
      return 'granted';
    }

    if (Notification.permission === 'denied') {
      return 'denied';
    }

    // Solicitar permiss√£o
    const permission = await Notification.requestPermission();
    console.log('Permiss√£o de notifica√ß√£o:', permission);
    
    return permission;
  };

  /**
   * Mostra uma notifica√ß√£o
   */
  const showNotification = (title: string, options?: NotificationOptions): void => {
    if (Notification.permission !== 'granted') {
      console.warn('Permiss√£o de notifica√ß√£o n√£o concedida');
      return;
    }

    const defaultOptions: NotificationOptions = {
      icon: '/icons/icon-192x192.svg',
      badge: '/icons/icon-72x72.svg',
      data: {
        url: '/dashboard'
      },
      ...options
    };

    // Adicionar vibra√ß√£o se suportado (n√£o est√° no tipo NotificationOptions)
    const notificationOptions = {
      ...defaultOptions,
      ...(navigator.vibrate && { vibrate: [200, 100, 200] })
    } as NotificationOptions;

    // Usar Service Worker se dispon√≠vel, sen√£o usar API direta
    if (registration) {
      registration.showNotification(title, notificationOptions);
    } else {
      new Notification(title, notificationOptions);
    }
  };

  /**
   * Configura listeners de eventos PWA
   */
  useEffect(() => {
    // Verificar se j√° est√° instalado
    setIsInstalled(checkIfInstalled());

    // Listener para prompt de instala√ß√£o
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setIsInstallable(true);
      
      console.log('üí° PWA pode ser instalado');
    };

    // Listener para quando o app √© instalado
    const handleAppInstalled = () => {
      console.log('üéâ PWA foi instalado!');
      setIsInstalled(true);
      setIsInstallable(false);
      setDeferredPrompt(null);
    };

    // Listener para mudan√ßas de conectividade
    const handleOnline = () => {
      console.log('üåê Conectado √† internet');
      setIsOnline(true);
    };

    const handleOffline = () => {
      console.log('üì¥ Desconectado da internet');
      setIsOnline(false);
    };

    // Registrar listeners
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Verificar Service Worker
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.ready.then((reg) => {
        setRegistration(reg);
        
        // Verificar atualiza√ß√µes
        reg.addEventListener('updatefound', () => {
          const newWorker = reg.installing;
          if (newWorker) {
            newWorker.addEventListener('statechange', () => {
              if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                console.log('üîÑ Nova vers√£o dispon√≠vel!');
                setIsUpdateAvailable(true);
              }
            });
          }
        });
      });

      // Listener para mensagens do Service Worker
      navigator.serviceWorker.addEventListener('message', (event) => {
        if (event.data && event.data.type === 'SW_UPDATED') {
          setIsUpdateAvailable(true);
        }
      });
    }

    // Cleanup
    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  /**
   * Monitora mudan√ßas no display mode
   */
  useEffect(() => {
    const mediaQuery = window.matchMedia('(display-mode: standalone)');
    
    const handleDisplayModeChange = (e: MediaQueryListEvent) => {
      setIsInstalled(e.matches);
    };

    mediaQuery.addEventListener('change', handleDisplayModeChange);
    
    return () => {
      mediaQuery.removeEventListener('change', handleDisplayModeChange);
    };
  }, []);

  return {
    // Estado
    isInstallable,
    isInstalled,
    isUpdateAvailable,
    isOnline,
    
    // A√ß√µes
    installApp,
    updateApp,
    requestNotificationPermission,
    showNotification
  };
};

export default usePWA;