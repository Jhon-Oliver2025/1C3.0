version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: trading_signals
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Flask API
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/trading_signals
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./back/data:/app/data
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Frontend React App
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://backend:5000
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend

  # Nginx Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "3000:80"
    command: |
      sh -c '
      cat > /etc/nginx/nginx.conf << EOF
      events {
          worker_connections 1024;
      }
      
      http {
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          
          sendfile        on;
          keepalive_timeout  65;
          
          # Upstreams
          upstream backend {
              server backend:5000;
          }
          
          upstream frontend {
              server frontend:80;
          }
          
          server {
              listen 80;
              server_name _;
              
              # Health check endpoint
              location /api/health {
                  proxy_pass http://backend/api/health;
                  proxy_set_header Host $$host;
                  proxy_set_header X-Real-IP $$remote_addr;
                  proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $$scheme;
                  
                  # CORS headers
                  add_header Access-Control-Allow-Origin "*" always;
                  add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                  add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                  
                  # Handle preflight requests
                  if ($$request_method = OPTIONS) {
                      return 204;
                  }
                  
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
              
              # API routes
              location /api/ {
                  proxy_pass http://backend/api/;
                  proxy_set_header Host $$host;
                  proxy_set_header X-Real-IP $$remote_addr;
                  proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $$scheme;
                  
                  # CORS headers
                  add_header Access-Control-Allow-Origin "*" always;
                  add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
                  add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization" always;
                  
                  # Handle preflight requests
                  if ($$request_method = OPTIONS) {
                      return 204;
                  }
                  
                  proxy_connect_timeout 120s;
                  proxy_send_timeout 600s;
                  proxy_read_timeout 600s;
                  
                  proxy_buffering off;
                  proxy_request_buffering off;
                  proxy_http_version 1.1;
                  proxy_set_header Connection "";
              }
              
              # Frontend routes
              location / {
                  proxy_pass http://frontend/;
                  proxy_set_header Host $$host;
                  proxy_set_header X-Real-IP $$remote_addr;
                  proxy_set_header X-Forwarded-For $$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $$scheme;
                  
                  proxy_connect_timeout 30s;
                  proxy_send_timeout 30s;
                  proxy_read_timeout 30s;
              }
          }
      }
      EOF
      nginx -g "daemon off;"
      '
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - frontend
      - backend

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_data:
    driver: local