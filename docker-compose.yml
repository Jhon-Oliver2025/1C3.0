version: '3.8'

services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: crypto-backend
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/cryptodb
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - BINANCE_API_KEY=${BINANCE_API_KEY}
      - BINANCE_SECRET_KEY=${BINANCE_SECRET_KEY}
      - USE_BINANCE_API=true
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - USE_TELEGRAM=true
      - SENDPULSE_CLIENT_ID=${SENDPULSE_CLIENT_ID}
      - SENDPULSE_CLIENT_SECRET=${SENDPULSE_CLIENT_SECRET}
      - SENDPULSE_SENDER_EMAIL=${SENDPULSE_SENDER_EMAIL}
      - SENDPULSE_API_URL=${SENDPULSE_API_URL}
    depends_on:
      - db
      - redis
    networks:
      - crypto-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 60s        # Aumentar de 30s para 60s
      timeout: 30s         # Aumentar de 10s para 30s
      retries: 5           # Aumentar de 3 para 5
      start_period: 120s   # Aumentar de 40s para 120s

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    container_name: crypto-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - crypto-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s        # Aumentar de 30s para 60s
      timeout: 30s         # Aumentar de 10s para 30s
      retries: 5           # Aumentar de 3 para 5
      start_period: 120s   # Aumentar de 40s para 120s

  db:
    image: postgres:15-alpine
    container_name: crypto-db
    environment:
      - POSTGRES_DB=cryptodb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./back/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: crypto-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - crypto-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  crypto-network:
    driver: bridge