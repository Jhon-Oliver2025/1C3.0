#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Krypton Trading Bot - Vers√£o com Supabase
Sistema de trading automatizado com an√°lise t√©cnica avan√ßada
"""

import os
import sys
import time
import logging
from datetime import datetime
from flask import Flask, jsonify, request
from flask_cors import CORS
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

# Importar configura√ß√µes
from config import server
from supabase_config import supabase_config

# Configurar CORS
CORS(server, resources={
    r"/api/*": {
        "origins": ["*"],
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
})

class KryptonBotSupabase:
    """
    Bot de trading principal com integra√ß√£o Supabase
    """
    
    def __init__(self):
        self.config = supabase_config
        self.database_url = self.config.get_database_url()
        
        # Inicializar componentes
        self._init_components()
        
        print("‚úÖ KryptonBot inicializado com Supabase")
    
    def _init_components(self):
        """
        Inicializa os componentes do bot
        """
        try:
            # Importar e inicializar componentes essenciais
            from core.binance_client import BinanceClient
            from core.telegram_notifier import TelegramNotifier
            from core.technical_analysis import TechnicalAnalysis
            from core.gerenciador_sinais import GerenciadorSinais
            
            # Inicializar clientes
            self.binance_client = BinanceClient()
            self.telegram = TelegramNotifier()
            self.technical_analysis = TechnicalAnalysis()
            
            # Inicializar gerenciador de sinais com Supabase
            self.gerenciador_sinais = GerenciadorSinais(
                database_url=self.database_url,
                use_supabase=True
            )
            
            print("‚úÖ Componentes inicializados com sucesso")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao inicializar componentes: {e}")
            # Continuar mesmo com erros para permitir healthcheck
    
    def get_status(self):
        """
        Retorna o status do bot
        """
        status = {
            'bot': 'running',
            'database': 'connected',
            'supabase_url': self.config.SUPABASE_URL,
            'timestamp': datetime.now().isoformat()
        }
        
        # Verificar componentes
        try:
            if hasattr(self, 'binance_client'):
                status['binance'] = 'connected'
            if hasattr(self, 'telegram'):
                status['telegram'] = 'connected'
            if hasattr(self, 'gerenciador_sinais'):
                status['signals'] = 'connected'
        except:
            pass
        
        return status

# Inst√¢ncia global do bot
bot = None

def create_app():
    """
    Factory function para criar a aplica√ß√£o Flask
    """
    global bot
    
    try:
        # Inicializar o bot
        bot = KryptonBotSupabase()
        print("‚úÖ Bot inicializado com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao inicializar bot: {e}")
        # Criar um bot mock para permitir que a aplica√ß√£o inicie
        class MockBot:
            def get_status(self):
                return {
                    'bot': 'degraded',
                    'error': 'Initialization failed',
                    'timestamp': datetime.now().isoformat()
                }
        bot = MockBot()
    
    # Registrar rotas b√°sicas
    @server.route('/api/health')
    def health_check():
        """
        Endpoint de health check para Docker
        """
        try:
            status = bot.get_status()
            return jsonify({
                'status': 'healthy',
                'service': 'krypton-bot-supabase',
                'details': status
            }), 200
        except Exception as e:
            return jsonify({
                'status': 'unhealthy',
                'service': 'krypton-bot-supabase',
                'error': str(e)
            }), 500
    
    @server.route('/api/status')
    def api_status():
        """
        Endpoint de status da API
        """
        try:
            status = bot.get_status()
            return jsonify(status), 200
        except Exception as e:
            return jsonify({
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }), 500
    
    @server.route('/')
    def index():
        """
        P√°gina inicial
        """
        return jsonify({
            'service': 'Krypton Trading Bot - Supabase',
            'version': '2.0.0',
            'status': 'running',
            'database': 'supabase'
        })
    
    return server

def main():
    """
    Fun√ß√£o principal
    """
    print("üöÄ Iniciando Krypton Trading Bot com Supabase...")
    
    # Verificar vari√°veis de ambiente cr√≠ticas
    try:
        supabase_config._validate_config()
    except ValueError as e:
        print(f"‚ùå Erro de configura√ß√£o: {e}")
        print("üí° Certifique-se de que as vari√°veis SUPABASE_URL, SUPABASE_ANON_KEY e SUPABASE_DATABASE_URL est√£o definidas")
        sys.exit(1)
    
    # Criar aplica√ß√£o
    app = create_app()
    
    # Configura√ß√µes do servidor
    port = int(os.getenv('FLASK_PORT', 5000))
    host = os.getenv('FLASK_HOST', '0.0.0.0')
    debug = os.getenv('FLASK_DEBUG', 'False').lower() == 'true'
    
    print(f"üåê Servidor iniciando em {host}:{port}")
    print(f"üîß Debug mode: {debug}")
    print(f"üóÑÔ∏è Database: Supabase")
    
    # Iniciar servidor
    try:
        app.run(
            host=host,
            port=port,
            debug=debug,
            threaded=True
        )
    except KeyboardInterrupt:
        print("\nüëã Encerrando aplica√ß√£o...")
    except Exception as e:
        print(f"‚ùå Erro ao iniciar servidor: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()